generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CLIENT
}

model User {
  accounts           Account[]
  createdAt          DateTime          @default(now())
  email              String?           @unique
  emailVerified      DateTime?
  favoriteProducts   FavoriteProducts?
  favoriteProductsId String?           @db.ObjectId
  hashedPassword     String?
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  image              Image?
  firstName          String
  lastName           String
  role               Role              @default(CLIENT)
  stores             Store[]
  order              Order[]
  updatedAt          DateTime          @updatedAt
}

model FavoriteProducts {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  products   Product[] @relation(fields: [productIds], references: [id])
  productIds String[]  @db.ObjectId
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String    @unique @db.ObjectId
}

model Account {
  access_token      String?
  expires_at        Int?
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  id_token          String?
  provider          String
  providerAccountId String  @db.ObjectId
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String  @db.ObjectId
}

model Store {
  billboards Billboard[]
  categories Category[]
  colors     Color[]
  createdAt  DateTime    @default(now())
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  slug       String      @unique
  name       String
  orders     Order[]
  products   Product[]
  sizes      Size[]
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String      @db.ObjectId
  web        String?

  @@index([userId])
}

model Billboard {
  categories  Category[]
  createdAt   DateTime   @default(now())
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  image       Image?
  label       String
  description String
  store       Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String     @db.ObjectId
  updatedAt   DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  billboard   Billboard @relation(fields: [billboardId], references: [id], onDelete: Cascade)
  billboardId String    @db.ObjectId
  createdAt   DateTime  @default(now())
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  products    Product[]
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String    @db.ObjectId
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  category           Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId         String             @db.ObjectId
  colorIds           String[]           @db.ObjectId
  colors             Color[]            @relation(fields: [colorIds], references: [id])
  createdAt          DateTime           @default(now())
  description        String?
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  images             Image[]
  isArchived         Boolean            @default(false)
  isFeatured         Boolean            @default(false)
  name               String
  orderItems         OrderItem[]
  price              Float
  sizeIds            String[]           @db.ObjectId
  sizes              Size[]             @relation(fields: [sizeIds], references: [id])
  stock              Int
  store              Store              @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId            String             @db.ObjectId
  updatedAt          DateTime           @updatedAt
  favoriteProductIds String[]           @db.ObjectId
  favoriteProducts   FavoriteProducts[] @relation(fields: [favoriteProductIds], references: [id])

  @@index([storeId])
  @@index([categoryId])
}

model Order {
  address    String      @default("")
  createdAt  DateTime    @default(now())
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  isPaid     Boolean     @default(false)
  orderItems OrderItem[]
  phone      String      @default("")
  store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId    String      @db.ObjectId
  user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?     @unique @db.ObjectId
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  quantity  Int
  colorId   String  @db.ObjectId
  sizeId    String  @db.ObjectId

  @@index([orderId])
  @@index([productId])
}

model Size {
  createdAt  DateTime  @default(now())
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  productIds String[]  @db.ObjectId
  products   Product[] @relation(fields: [productIds], references: [id])
  store      Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId    String    @db.ObjectId
  updatedAt  DateTime  @updatedAt
  value      String

  @@index([storeId])
}

model Color {
  createdAt   DateTime  @default(now())
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  productsIds String[]  @db.ObjectId
  products    Product[] @relation(fields: [productsIds], references: [id])
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String    @db.ObjectId
  updatedAt   DateTime  @updatedAt
  color       String
  images       Image[]

  @@index([storeId])
}

model Image {
  createdAt   DateTime   @default(now())
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  product     Product?   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String?    @db.ObjectId
  color       Color?     @relation(fields: [colorId], references: [id], onDelete: Cascade)
  colorId     String?    @db.ObjectId
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?    @unique @db.ObjectId
  updatedAt   DateTime   @updatedAt
  publicId    String
  url         String
  billboard   Billboard? @relation(fields: [billboardId], references: [id], onDelete: Cascade)
  billboardId String?    @unique @db.ObjectId

  @@index([productId])
}
